def label = "worker-${UUID.randomUUID().toString()}"
def buildNum = "${BUILD_NUMBER}"
def appName = "istio-api-gateway"
def registry  = "${MY_NCR_URL}"
def userAccessKey  = "${MY_USER_ACCESS_KEY}"
def secretAccessKey  = "${MY_USER_SECRET_KEY}"
def githubCredential = "github-credential"
def registryCredential = "ncr-credential" 
def githubURL = "${MY_MERCURY_REPO_URL}"

podTemplate(label: label, containers: [
    containerTemplate(name: 'git', image: 'alpine/git', command: 'cat', ttyEnabled: true),
    containerTemplate(name: 'podman', image: 'docker.io/mysticrenji/podman', command: 'cat', ttyEnabled: true)
],
volumes: [
  hostPathVolume(mountPath: '/var/lib/containers', hostPath: '{}'),
  hostPathVolume(mountPath: '/dev/shm', hostPath: '{}'),
  hostPathVolume(mountPath: '/var/run', hostPath: '{}'),
  hostPathVolume(mountPath: '/tmp', hostPath: '{}')
]) {
    node(label) {
        stage('Clone repository') {
            container('git') {
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/master']],
                    userRemoteConfigs: [
                        [url: "$githubURL", credentialsId: "$githubCredential"]
                    ],
                ])
            }
        }
        stage('Build docker image') {
            container('podman') {
                sh "podman login --tls-verify=false -u $userAccessKey -p $secretAccessKey $registry"
                sh "podman build --tls-verify=false --squash -t $registry/istio-api-gateway -f ./Dockerfile"
                sh "podman push --tls-verify=false $registry/istio-api-gateway"
            }
        }
    }
}