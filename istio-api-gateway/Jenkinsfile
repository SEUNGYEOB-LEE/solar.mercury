def label = "worker-${UUID.randomUUID().toString()}"
def buildNum = "${BUILD_NUMBER}"
def appName = "istio-api-gateway"
def registry  = "${MY_NCR_URL}"
def userAccessKey  = "${MY_USER_ACCESS_KEY}"
def secretAccessKey  = "${MY_USER_SECRET_KEY}"
def githubCredential = "github-credential"
def registryCredential = "ncr-credential" 
def githubURL = "${MY_MERCURY_REPO_URL}"
podTemplate(label: label, containers: [
    containerTemplate(name: 'git', image: 'alpine/git', command: 'cat', ttyEnabled: true),
    containerTemplate(name: 'kaniko', image: 'gcr.io/kaniko-project/executor:v1.6.0-debug', command: 'sleep', args: '99d',ttyEnabled: true)
],
volumes: [
    secretVolume(secretName: 'regcred', mountPath: '/kaniko/.docker'),
    hostPathVolume(mountPath: '/kaniko/.docker', hostPath: '/kaniko/.docker')
]) {
    node(label) {
        stage('Clone repository') {
            container('git') {
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/master']],
                    userRemoteConfigs: [
                        [url: "$githubURL", credentialsId: "$githubCredential"]
                    ],
                ])
            }
        }
        stage('Build docker image') {
            container('kaniko') {
                sh "echo '{\"auths\":{\"$registry\":{\"username\":\"$userAccessKey\",\"password\":\"$secretAccessKey\"}}}' > /kaniko/.docker/config.json"
                sh "cat /kaniko/.docker/config.json"
                sh "/kaniko/executor --context=./istio-api-gateway --destination=$registry/$appName:$buildNum --dockerfile=Dockerfile"
            }
        }
    }

    
          
            
    

          
    
    
  
}